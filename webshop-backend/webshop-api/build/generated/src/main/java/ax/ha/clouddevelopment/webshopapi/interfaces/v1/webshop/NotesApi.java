/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ax.ha.clouddevelopment.webshopapi.interfaces.v1.webshop;

import ax.ha.clouddevelopment.webshopapi.interfaces.v1.webshop.model.Note;
import ax.ha.clouddevelopment.webshopapi.interfaces.v1.webshop.model.NoteEntity;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-13T14:51:36.011845800+02:00[Europe/Mariehamn]")

@Validated
@Api(value = "notes", description = "the notes API")
public interface NotesApi {

    /**
     * POST /notes : Create a note
     *
     * @param note Note to create (required)
     * @return Notes response (status code 200)
     */
    @ApiOperation(value = "Create a note", nickname = "createNote", notes = "", response = NoteEntity.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Notes response", response = NoteEntity.class) })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<NoteEntity> createNote(@ApiParam(value = "Note to create" ,required=true )  @Valid @RequestBody Note note);


    /**
     * DELETE /notes/{noteId} : Delete a note
     *
     * @param noteId ID of the note (required)
     * @return Deleted (status code 204)
     */
    @ApiOperation(value = "Delete a note", nickname = "deleteNote", notes = "", tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted") })
    @RequestMapping(value = "/notes/{noteId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteNote(@ApiParam(value = "ID of the note",required=true) @PathVariable("noteId") UUID noteId);


    /**
     * GET /notes/{noteId} : Retrieve a single note
     *
     * @param noteId ID of the note (required)
     * @return Notes response (status code 200)
     */
    @ApiOperation(value = "Retrieve a single note", nickname = "getNote", notes = "", response = NoteEntity.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Notes response", response = NoteEntity.class) })
    @RequestMapping(value = "/notes/{noteId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<NoteEntity> getNote(@ApiParam(value = "ID of the note",required=true) @PathVariable("noteId") UUID noteId);


    /**
     * GET /notes : Retrieve all notes
     *
     * @return Notes response (status code 200)
     */
    @ApiOperation(value = "Retrieve all notes", nickname = "getNotes", notes = "", response = NoteEntity.class, responseContainer = "List", tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Notes response", response = NoteEntity.class, responseContainer = "List") })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<NoteEntity>> getNotes();


    /**
     * PUT /notes/{noteId} : Update a note
     *
     * @param noteId ID of the note (required)
     * @param note  (required)
     * @return Notes response (status code 200)
     */
    @ApiOperation(value = "Update a note", nickname = "updateNote", notes = "", response = NoteEntity.class, tags={ "Notes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Notes response", response = NoteEntity.class) })
    @RequestMapping(value = "/notes/{noteId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<NoteEntity> updateNote(@ApiParam(value = "ID of the note",required=true) @PathVariable("noteId") UUID noteId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Note note);

}
